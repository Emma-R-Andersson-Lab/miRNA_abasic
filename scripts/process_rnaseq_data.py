#!/usr/bin/env python3
# -*- coding: utf-8 -*-


'''
This script reads the RNA-seq differential gene expression data
and maps each Ensembl Gene ID in the dataset to an Ensembl
Transcript ID (from the file generated by select_transcript.py).
'''


import argparse

import pandas as pd


def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        '--infile', type=str, default='../data/dge/dge_raw.txt',
        help='Raw DGE data file.')
    parser.add_argument(
        '--outfile', type=str, default='../data/dge/dge.txt',
        help='Processed DGE data file.')
    parser.add_argument(
        '--transcript_file', type=str, default='../data/dge/transcripts.txt',
        help='File mapping Gene IDs to Transcript IDs.')
    args = parser.parse_args()    

    # Read data
    data = pd.read_csv(args.infile, sep='\t')

    # Get transcripts
    transcripts = pd.read_csv(args.transcript_file, sep='\t')
    data = pd.merge(data, transcripts)
    assert data['Gene ID'].nunique() == data['Transcript ID'].nunique()

    # Drop genes which do not code for proteins
    data = data[data['Gene type'] == 'protein_coding']
    data.drop(columns=['Gene type', 'Source'], inplace=True)

    # Save the data
    data = data[
        ['Gene ID', 'Transcript ID', 'Gene name']+
        [i for i in data.columns if i not in
         ['Gene ID', 'Transcript ID', 'Gene name']]]
    data.sort_values(by='Gene name', inplace=True)
    data.to_csv(args.outfile, sep='\t', index=False, na_rep='NaN')


if __name__ == '__main__':
    main()
